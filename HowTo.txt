0) Resolving github issues
	- create account
		go to www.github.com and follow the instructions
	- upload private key
		in your ~/.ssh/ directory there should be a file ending in .pub
		copy this file to the ssh keys page in your github account settings
		
		if you do not know what I am talking about, read:
			https://help.github.com/articles/generating-ssh-keys
		once you are done, be sure to run
			ssh -T git@github.com
		(note the username is git -- DON'T change it!)
		and it should say that you are ok. Otherwise read the above URL.
	- create project
		use the github web interface and ask that a README and LICENCE file be generated
		(this is much faster, as it allows you to simply clone the project from the
		github repositiry to your computer
	- clone project
		(this is the tricky bit, if you don't mess things up here, everything will be fine.
		 if not, expect to learn a lot about git and github)
			git clone git@github.com:/<USERNAME>/<PROJECT_NAME>.git	
		where USERNAME is your github username, and PROJECT_NAME is the name you selected
		for your github project.
		e.g.
			git clone git@github.com:/vp080808/Genode.git	
	- update changes
		- when creating a new file you have to use
			git add <FILENAME>
		- when you just want to make changes to a file you have to check it out first
			git checkout
		- then you change the files, and commit
			git commit -a
		- make your change comments at the top of the file and save & quit (depends on
		  which editor you use).

		- Now you need to push the changes to the repository
			git push
Using Genode on Ubuntu 14.04

1) Install genode :
	- Install required (prerequisite) packages:

	 	sudo apt-get install libsdl1.2-dev libsdl1.2debian
	 	sudo apt-get install byacc flex 
	 	sudo apt-get install expect 
	 	sudo apt-get install genisoimage 
	 	sudo apt-get install qemu -y 

 	- download last release of Genode from :http://sourceforge.net/projects/genode/files/
	- extract files in (say) home directory
 	- to build genode for the Linux base platform,  execute 
 	 	cd <genod_dir>
 		 ./tool/create_builddir linux_x86 BUILD_DIR=build.lx 
 	- then to prepare it
  	 	cd  build.lx 
	 	make 

2) Run the hello_tutorial application
	-  edit  file  "etc/ build.conf " file and add
		REPOSITORIES += $(GENODE_DIR)/repos/hello_tutorial
	- save file and  execute: 
		 make run/hello

3) How to gdb genode apps (by Sebastian Sumpf <Sebastian.Sumpf <at> genode-labs.com> )

	- GDB cannot be start Genode applications, so you need to connect to an already running
	  application.  So, to debug your application you have to call 'wait_for_continue' from
	  within your code.

	- Somewhere in the code add something like:

		extern "C" void wait_for_continue();
	    	
		void some_func_in_your_program()
		{
      			wait_for_continue();
  		}

	  This will cause your program to stall in the function above.

	- Compile and run your program
	- As mentioned above, your program will stop in the `wait_for_continue'  function
	- Now find out the process id of your program, ('ps -efL | grep Genode')
	- Start gdb with 'gdb -p <Process ID from ps>' , this will attach gdb to the process
	- Switch to the Genode output console (where you started core) and hit 'enter', 
	  this will cause your program to leave the `wait_for_continue' function.
	- Switch back to GDB, you now may step and set breakpoints (note: Does not work with
	  all gdb versions), inspect variables, ... .

4) Project -- merge LWIP and Genode wait

	- My goal is to use a unified "select" in the BSD select(2) context, that can
	  wait on both LWIP sockets and Genode I/O descriptors.
